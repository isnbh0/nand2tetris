// Stuff

/** 2048 game manager. */
class TwosGame {
   // Game board
   field String titleString;
   field String instructionString;
   field String startString;
   field Board board;
   field boolean loseCondition, winCondition;
   field Board board_old;
   field boolean loseCondition_old, winCondition_old;
   field int winThreshold;
   field int nrows, ncols;

   constructor TwosGame new() {
      let titleString = "= = = 2 0 4 8 = = =";
      let instructionString = "Arrows: move / U: undo / R: reset / Q: quit";
      let startString = "Press spacebar to start...";
      
      // Print main screen
      do Output.moveCursor(1, 22);
      do Output.printString(titleString);
      do Output.moveCursor(3, 10);
      do Output.printString(instructionString);

      let nrows = 4;
      let ncols = 4;
      let winThreshold = 128;
      let winThreshold = winThreshold - 1; // winThreshold or higher wins

      do init();

      return this;
   }

   method void init() {
      let loseCondition = false;
      let winCondition = false;
      let board = Board.new(nrows, ncols);
      let board_old = Board.new(nrows, ncols);
      return;
   }

   /** Main game.
       Has two phases: start screen and game loop.
       Start screen also helps to seed the PRNG. */
   method void run() {
      var Board board_new;
      var char key;
      var boolean started, exit;
      var int initSeed;
      var boolean filled, sameAsBefore;
      var int dir;

      let started = false;
      let exit = false;
      let initSeed = 0;

      // Start screen
      while (~started) {
         do Output.moveCursor(11, 19);
         do Output.printString(startString);

         // Wait for key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            let initSeed = initSeed + 1;
         }

         if (key = 32) {  // spacebar
            do Random.setSeed(initSeed);
            let started = true;
         }

         // Wait for key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
         }
      }

      do board.initialize();

      // Game loop
      while (~exit) {
         // Wait for key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            // other actions while key is not pressed
         }

         if (key = 81) {  // q key
            do Output.printString("You quit successfully.");
            let exit = true;
         }
         if (key = 82) {  // r key
            do board.dispose();
            do init();
            do board.initialize();
         }
         if (key = 85) {  // u key
            do undo();
            do board.print();
         }
         if ((key > 129) & (key < 134)) {  // arrows

            let board_new = BoardOps.alter(board, key - 129);

            if (board_new.sameAs(board)) {
               // do Output.printInt(999);

               do board_new.dispose();
               let filled = false;
            }
            else {
               // do Output.printInt(888);

               do board_old.dispose();
               let board_old = board;
               let board = board_new;
               do board.print();

               do Sys.wait(50);
               let filled = board.populateRNG();
            }

            // check win condition
            do checkWinCondition();
            if (~filled) {
               do checkLoseCondition();
            }

            do board.print();

            // print status according to condition
            if (winCondition) {
               do Output.moveCursor(13, 23);
               do Output.printString("Y O U   W I N ! !");
            }
            else {
               if (loseCondition) {
                  do Output.moveCursor(13, 23);
                  do Output.printString("G A M E   O V E R");
               }
            }

         }

         // Wait for key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
         }
      }

      return;
   }

   method void undo() {
      var Board board_tmp;
      var boolean loseCondition_tmp, winCondition_tmp;

      let board_tmp = board;
      let board = board_old;
      let board_old = board_tmp;

      let loseCondition_tmp = loseCondition;
      let loseCondition = loseCondition_old;
      let loseCondition_old = loseCondition_tmp;
 
      let winCondition_tmp = winCondition;
      let winCondition = winCondition_old;
      let winCondition_old = winCondition_tmp;

      return;
   }

   method void checkWinCondition() {
      let winCondition_old = winCondition;
      let winCondition = board.containsBiggerThan(winThreshold);
      return;
   }

   method void checkLoseCondition() {
      var int dir;
      var Board board_alt;

      let loseCondition_old = loseCondition;
      let loseCondition = true;
      let dir = 1;
      while (dir < 5) {
         let board_alt = BoardOps.alter(board, dir);
         if (~(board.sameAs(board_alt))) {
            // do Output.printInt(dir);
            let loseCondition = false;
            let dir = 5;
         }
         do board_alt.dispose();
         let dir = dir + 1;
      }
      return;
   }

   method void dispose() {
      do titleString.dispose();
      do instructionString.dispose();
      do startString.dispose();
      do board.dispose();

      do Memory.deAlloc(this);
      return;
   }
}
