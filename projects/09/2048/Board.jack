// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Board/Board.jack

/** Implements a graphical board. */
class Board {
   field int nrows, ncols;
   field int rOffset, cOffset;
   field Array grid;

   /** Constructs a new board with a given number of rows and columns. */
   constructor Board new(int Arows, int Acols) {
      var int i, j;
      var Array row;

      let nrows = Arows;
      let ncols = Acols;
      let grid = Array.new(nrows);

      let i = 0;
      while (i < nrows) {
         let row = Array.new(ncols);
         let j = 0;
         while (j < ncols) {
            let grid[i] = row;
            let row[j] = Block.new();
            let j = j + 1;
         }
         let i = i + 1;
      }

      let rOffset = 4;
      let cOffset = 10;
      return this;
   }

   method int getNrows() {
      return nrows;
   }

   method int getNcols() {
      return ncols;
   }

   /** Get Block at row r, column c. */
   method Block getBlockAt(int r, int c) {
      var Array row;
      var Block block;

      let row = grid[r];
      let block = row[c];
      return block;
   }

   /** Set value v to block at position r, c. */
   method void setBlock(int v, int r, int c) {
      var Block block;
      let block = getBlockAt(r, c);
      do block.setValue(v);
      return;
   }

   /** Populate board. */
   method void populate() {
      var Array rows, cols;
      var Block currBlock;
      var int r, c;
      var boolean done;

      let rows = Array.new(4);
      let cols = Array.new(4);

      let rows[0] = 0;
      let rows[1] = 1;
      let rows[2] = 2;
      let rows[3] = 3;

      let cols[0] = 0;
      let cols[1] = 1;
      let cols[2] = 2;
      let cols[3] = 3;

      let r = 0;
      let done = false;
      while (r < 4) {
         let c = 0;
         while (c < 4) {
            let currBlock = getBlockAt(r, c);
            if ((currBlock.isEmpty()) & ~done){
               do setBlock(2, rows[r], cols[c]);
               let done = true;
            }
            let c = c + 1;
         }
         let r = r + 1;
      }

      do rows.dispose();
      do cols.dispose();
      return;
   }

   /** Initialize board. */
   method void initialize() {
      return;
   }

   method boolean isEmptyAt(int r, int c) {
      var Block block;
      let block = getBlockAt(r, c);
      return block.isEmpty();
   }

   /** Disposes this board. */
   method void dispose() {
      var Array row;
      var Block block;
      var int r, c;

      let r = 0;
      while (r < nrows) {
         let row = grid[r];
         let c = 0;
         while (c < ncols) {
            let block = row[c];
            do block.dispose();
            let c = c + 1;
         }
         do row.dispose();
         let r = r + 1;
      }
      do grid.dispose();

      do Memory.deAlloc(this);
      return;
   }

   /** Print a blank space c times.
       Helper for Board.print() below. */
   function void printOffset(int c) {
      var String space;
      var int ci;

      let space = " ";
      let ci = 0;
      while (ci < c) {
         do Output.printString(space);
         let ci = ci + 1;
      }

      do space.dispose();
      return;
   }

   /** Draws the board on the screen. */
   method void print() {
      var int r, c, p, CHAR_WIDTH;
      var Block currBlock;
      var String wall, leftPillar, centerPillar;

      let leftPillar = "| ";
      let centerPillar = " | ";

      // Set starting point for cursor
      do Output.moveCursor(rOffset, 0);
      do Board.printOffset(cOffset);
      
      let CHAR_WIDTH = (Block.getMaxLength() + 3) * ncols + 1;
      let wall = String.new(CHAR_WIDTH);

      // Make wall for separating rows
      let p = 0;
      while (p < CHAR_WIDTH) {
         do wall.appendChar(45);  // "-"
         let p = p + 1;
      }

      let r = 0;
      while (r < nrows) {
         do Output.printString(wall);
         do Output.println();      // New line
         do Output.println();      // New line
         do Board.printOffset(cOffset);
         do Output.printString(leftPillar);
         let c = 0;
         while (c < ncols) {
            let currBlock = getBlockAt(r, c);
            do currBlock.print();
            do Output.printString(centerPillar);
            let c = c + 1;
         }
         do Output.println();      // New line
         do Output.println();      // New line
         do Board.printOffset(cOffset);

         let r = r + 1;
      }
      do Output.printString(wall);
      do Output.println();      // New line
      do Board.printOffset(cOffset);

      do leftPillar.dispose();
      do centerPillar.dispose();
      do wall.dispose();
      return;
   }



}
